// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockUserServiceMockAdmins           sync.RWMutex
	lockUserServiceMockCreateUser       sync.RWMutex
	lockUserServiceMockDeleteUser       sync.RWMutex
	lockUserServiceMockExistsByEmail    sync.RWMutex
	lockUserServiceMockExistsByUsername sync.RWMutex
	lockUserServiceMockFeature          sync.RWMutex
	lockUserServiceMockFeatured         sync.RWMutex
	lockUserServiceMockIsAdmin          sync.RWMutex
	lockUserServiceMockSetAvatarID      sync.RWMutex
	lockUserServiceMockUnFeature        sync.RWMutex
	lockUserServiceMockUserByID         sync.RWMutex
	lockUserServiceMockUserByUsername   sync.RWMutex
	lockUserServiceMockUsers            sync.RWMutex
)

// UserServiceMock is a mock implementation of UserService.
//
//     func TestSomethingThatUsesUserService(t *testing.T) {
//
//         // make and configure a mocked UserService
//         mockedUserService := &UserServiceMock{
//             AdminsFunc: func() ([]*User, error) {
// 	               panic("TODO: mock out the Admins method")
//             },
//             CreateUserFunc: func(u *User) error {
// 	               panic("TODO: mock out the CreateUser method")
//             },
//             DeleteUserFunc: func(id uint64) error {
// 	               panic("TODO: mock out the DeleteUser method")
//             },
//             ExistsByEmailFunc: func(email string) (bool, error) {
// 	               panic("TODO: mock out the ExistsByEmail method")
//             },
//             ExistsByUsernameFunc: func(username string) (bool, error) {
// 	               panic("TODO: mock out the ExistsByUsername method")
//             },
//             FeatureFunc: func(id uint64, user uint64) error {
// 	               panic("TODO: mock out the Feature method")
//             },
//             FeaturedFunc: func() ([]*User, error) {
// 	               panic("TODO: mock out the Featured method")
//             },
//             IsAdminFunc: func(id uint64) (bool, error) {
// 	               panic("TODO: mock out the IsAdmin method")
//             },
//             SetAvatarIDFunc: func(id uint64, avatarID string) error {
// 	               panic("TODO: mock out the SetAvatarID method")
//             },
//             UnFeatureFunc: func(id uint64, user uint64) error {
// 	               panic("TODO: mock out the UnFeature method")
//             },
//             UserByIDFunc: func(id uint64) (*User, error) {
// 	               panic("TODO: mock out the UserByID method")
//             },
//             UserByUsernameFunc: func(username string) (*User, error) {
// 	               panic("TODO: mock out the UserByUsername method")
//             },
//             UsersFunc: func() ([]*User, error) {
// 	               panic("TODO: mock out the Users method")
//             },
//         }
//
//         // TODO: use mockedUserService in code that requires UserService
//         //       and then make assertions.
//
//     }
type UserServiceMock struct {
	// AdminsFunc mocks the Admins method.
	AdminsFunc func() ([]*User, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(u *User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(id uint64) error

	// ExistsByEmailFunc mocks the ExistsByEmail method.
	ExistsByEmailFunc func(email string) (bool, error)

	// ExistsByUsernameFunc mocks the ExistsByUsername method.
	ExistsByUsernameFunc func(username string) (bool, error)

	// FeatureFunc mocks the Feature method.
	FeatureFunc func(id uint64, user uint64) error

	// FeaturedFunc mocks the Featured method.
	FeaturedFunc func() ([]*User, error)

	// IsAdminFunc mocks the IsAdmin method.
	IsAdminFunc func(id uint64) (bool, error)

	// SetAvatarIDFunc mocks the SetAvatarID method.
	SetAvatarIDFunc func(id uint64, avatarID string) error

	// UnFeatureFunc mocks the UnFeature method.
	UnFeatureFunc func(id uint64, user uint64) error

	// UserByIDFunc mocks the UserByID method.
	UserByIDFunc func(id uint64) (*User, error)

	// UserByUsernameFunc mocks the UserByUsername method.
	UserByUsernameFunc func(username string) (*User, error)

	// UsersFunc mocks the Users method.
	UsersFunc func() ([]*User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Admins holds details about calls to the Admins method.
		Admins []struct {
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// U is the u argument value.
			U *User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ExistsByEmail holds details about calls to the ExistsByEmail method.
		ExistsByEmail []struct {
			// Email is the email argument value.
			Email string
		}
		// ExistsByUsername holds details about calls to the ExistsByUsername method.
		ExistsByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// Feature holds details about calls to the Feature method.
		Feature []struct {
			// ID is the id argument value.
			ID uint64
			// User is the user argument value.
			User uint64
		}
		// Featured holds details about calls to the Featured method.
		Featured []struct {
		}
		// IsAdmin holds details about calls to the IsAdmin method.
		IsAdmin []struct {
			// ID is the id argument value.
			ID uint64
		}
		// SetAvatarID holds details about calls to the SetAvatarID method.
		SetAvatarID []struct {
			// ID is the id argument value.
			ID uint64
			// AvatarID is the avatarID argument value.
			AvatarID string
		}
		// UnFeature holds details about calls to the UnFeature method.
		UnFeature []struct {
			// ID is the id argument value.
			ID uint64
			// User is the user argument value.
			User uint64
		}
		// UserByID holds details about calls to the UserByID method.
		UserByID []struct {
			// ID is the id argument value.
			ID uint64
		}
		// UserByUsername holds details about calls to the UserByUsername method.
		UserByUsername []struct {
			// Username is the username argument value.
			Username string
		}
		// Users holds details about calls to the Users method.
		Users []struct {
		}
	}
}

// Admins calls AdminsFunc.
func (mock *UserServiceMock) Admins() ([]*User, error) {
	if mock.AdminsFunc == nil {
		panic("UserServiceMock.AdminsFunc: method is nil but UserService.Admins was just called")
	}
	callInfo := struct {
	}{}
	lockUserServiceMockAdmins.Lock()
	mock.calls.Admins = append(mock.calls.Admins, callInfo)
	lockUserServiceMockAdmins.Unlock()
	return mock.AdminsFunc()
}

// AdminsCalls gets all the calls that were made to Admins.
// Check the length with:
//     len(mockedUserService.AdminsCalls())
func (mock *UserServiceMock) AdminsCalls() []struct {
} {
	var calls []struct {
	}
	lockUserServiceMockAdmins.RLock()
	calls = mock.calls.Admins
	lockUserServiceMockAdmins.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *UserServiceMock) CreateUser(u *User) error {
	if mock.CreateUserFunc == nil {
		panic("UserServiceMock.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
		U *User
	}{
		U: u,
	}
	lockUserServiceMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockUserServiceMockCreateUser.Unlock()
	return mock.CreateUserFunc(u)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedUserService.CreateUserCalls())
func (mock *UserServiceMock) CreateUserCalls() []struct {
	U *User
} {
	var calls []struct {
		U *User
	}
	lockUserServiceMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockUserServiceMockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserServiceMock) DeleteUser(id uint64) error {
	if mock.DeleteUserFunc == nil {
		panic("UserServiceMock.DeleteUserFunc: method is nil but UserService.DeleteUser was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockUserServiceMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockUserServiceMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(id)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedUserService.DeleteUserCalls())
func (mock *UserServiceMock) DeleteUserCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockUserServiceMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockUserServiceMockDeleteUser.RUnlock()
	return calls
}

// ExistsByEmail calls ExistsByEmailFunc.
func (mock *UserServiceMock) ExistsByEmail(email string) (bool, error) {
	if mock.ExistsByEmailFunc == nil {
		panic("UserServiceMock.ExistsByEmailFunc: method is nil but UserService.ExistsByEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockUserServiceMockExistsByEmail.Lock()
	mock.calls.ExistsByEmail = append(mock.calls.ExistsByEmail, callInfo)
	lockUserServiceMockExistsByEmail.Unlock()
	return mock.ExistsByEmailFunc(email)
}

// ExistsByEmailCalls gets all the calls that were made to ExistsByEmail.
// Check the length with:
//     len(mockedUserService.ExistsByEmailCalls())
func (mock *UserServiceMock) ExistsByEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockUserServiceMockExistsByEmail.RLock()
	calls = mock.calls.ExistsByEmail
	lockUserServiceMockExistsByEmail.RUnlock()
	return calls
}

// ExistsByUsername calls ExistsByUsernameFunc.
func (mock *UserServiceMock) ExistsByUsername(username string) (bool, error) {
	if mock.ExistsByUsernameFunc == nil {
		panic("UserServiceMock.ExistsByUsernameFunc: method is nil but UserService.ExistsByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	lockUserServiceMockExistsByUsername.Lock()
	mock.calls.ExistsByUsername = append(mock.calls.ExistsByUsername, callInfo)
	lockUserServiceMockExistsByUsername.Unlock()
	return mock.ExistsByUsernameFunc(username)
}

// ExistsByUsernameCalls gets all the calls that were made to ExistsByUsername.
// Check the length with:
//     len(mockedUserService.ExistsByUsernameCalls())
func (mock *UserServiceMock) ExistsByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	lockUserServiceMockExistsByUsername.RLock()
	calls = mock.calls.ExistsByUsername
	lockUserServiceMockExistsByUsername.RUnlock()
	return calls
}

// Feature calls FeatureFunc.
func (mock *UserServiceMock) Feature(id uint64, user uint64) error {
	if mock.FeatureFunc == nil {
		panic("UserServiceMock.FeatureFunc: method is nil but UserService.Feature was just called")
	}
	callInfo := struct {
		ID   uint64
		User uint64
	}{
		ID:   id,
		User: user,
	}
	lockUserServiceMockFeature.Lock()
	mock.calls.Feature = append(mock.calls.Feature, callInfo)
	lockUserServiceMockFeature.Unlock()
	return mock.FeatureFunc(id, user)
}

// FeatureCalls gets all the calls that were made to Feature.
// Check the length with:
//     len(mockedUserService.FeatureCalls())
func (mock *UserServiceMock) FeatureCalls() []struct {
	ID   uint64
	User uint64
} {
	var calls []struct {
		ID   uint64
		User uint64
	}
	lockUserServiceMockFeature.RLock()
	calls = mock.calls.Feature
	lockUserServiceMockFeature.RUnlock()
	return calls
}

// Featured calls FeaturedFunc.
func (mock *UserServiceMock) Featured() ([]*User, error) {
	if mock.FeaturedFunc == nil {
		panic("UserServiceMock.FeaturedFunc: method is nil but UserService.Featured was just called")
	}
	callInfo := struct {
	}{}
	lockUserServiceMockFeatured.Lock()
	mock.calls.Featured = append(mock.calls.Featured, callInfo)
	lockUserServiceMockFeatured.Unlock()
	return mock.FeaturedFunc()
}

// FeaturedCalls gets all the calls that were made to Featured.
// Check the length with:
//     len(mockedUserService.FeaturedCalls())
func (mock *UserServiceMock) FeaturedCalls() []struct {
} {
	var calls []struct {
	}
	lockUserServiceMockFeatured.RLock()
	calls = mock.calls.Featured
	lockUserServiceMockFeatured.RUnlock()
	return calls
}

// IsAdmin calls IsAdminFunc.
func (mock *UserServiceMock) IsAdmin(id uint64) (bool, error) {
	if mock.IsAdminFunc == nil {
		panic("UserServiceMock.IsAdminFunc: method is nil but UserService.IsAdmin was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockUserServiceMockIsAdmin.Lock()
	mock.calls.IsAdmin = append(mock.calls.IsAdmin, callInfo)
	lockUserServiceMockIsAdmin.Unlock()
	return mock.IsAdminFunc(id)
}

// IsAdminCalls gets all the calls that were made to IsAdmin.
// Check the length with:
//     len(mockedUserService.IsAdminCalls())
func (mock *UserServiceMock) IsAdminCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockUserServiceMockIsAdmin.RLock()
	calls = mock.calls.IsAdmin
	lockUserServiceMockIsAdmin.RUnlock()
	return calls
}

// SetAvatarID calls SetAvatarIDFunc.
func (mock *UserServiceMock) SetAvatarID(id uint64, avatarID string) error {
	if mock.SetAvatarIDFunc == nil {
		panic("UserServiceMock.SetAvatarIDFunc: method is nil but UserService.SetAvatarID was just called")
	}
	callInfo := struct {
		ID       uint64
		AvatarID string
	}{
		ID:       id,
		AvatarID: avatarID,
	}
	lockUserServiceMockSetAvatarID.Lock()
	mock.calls.SetAvatarID = append(mock.calls.SetAvatarID, callInfo)
	lockUserServiceMockSetAvatarID.Unlock()
	return mock.SetAvatarIDFunc(id, avatarID)
}

// SetAvatarIDCalls gets all the calls that were made to SetAvatarID.
// Check the length with:
//     len(mockedUserService.SetAvatarIDCalls())
func (mock *UserServiceMock) SetAvatarIDCalls() []struct {
	ID       uint64
	AvatarID string
} {
	var calls []struct {
		ID       uint64
		AvatarID string
	}
	lockUserServiceMockSetAvatarID.RLock()
	calls = mock.calls.SetAvatarID
	lockUserServiceMockSetAvatarID.RUnlock()
	return calls
}

// UnFeature calls UnFeatureFunc.
func (mock *UserServiceMock) UnFeature(id uint64, user uint64) error {
	if mock.UnFeatureFunc == nil {
		panic("UserServiceMock.UnFeatureFunc: method is nil but UserService.UnFeature was just called")
	}
	callInfo := struct {
		ID   uint64
		User uint64
	}{
		ID:   id,
		User: user,
	}
	lockUserServiceMockUnFeature.Lock()
	mock.calls.UnFeature = append(mock.calls.UnFeature, callInfo)
	lockUserServiceMockUnFeature.Unlock()
	return mock.UnFeatureFunc(id, user)
}

// UnFeatureCalls gets all the calls that were made to UnFeature.
// Check the length with:
//     len(mockedUserService.UnFeatureCalls())
func (mock *UserServiceMock) UnFeatureCalls() []struct {
	ID   uint64
	User uint64
} {
	var calls []struct {
		ID   uint64
		User uint64
	}
	lockUserServiceMockUnFeature.RLock()
	calls = mock.calls.UnFeature
	lockUserServiceMockUnFeature.RUnlock()
	return calls
}

// UserByID calls UserByIDFunc.
func (mock *UserServiceMock) UserByID(id uint64) (*User, error) {
	if mock.UserByIDFunc == nil {
		panic("UserServiceMock.UserByIDFunc: method is nil but UserService.UserByID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockUserServiceMockUserByID.Lock()
	mock.calls.UserByID = append(mock.calls.UserByID, callInfo)
	lockUserServiceMockUserByID.Unlock()
	return mock.UserByIDFunc(id)
}

// UserByIDCalls gets all the calls that were made to UserByID.
// Check the length with:
//     len(mockedUserService.UserByIDCalls())
func (mock *UserServiceMock) UserByIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockUserServiceMockUserByID.RLock()
	calls = mock.calls.UserByID
	lockUserServiceMockUserByID.RUnlock()
	return calls
}

// UserByUsername calls UserByUsernameFunc.
func (mock *UserServiceMock) UserByUsername(username string) (*User, error) {
	if mock.UserByUsernameFunc == nil {
		panic("UserServiceMock.UserByUsernameFunc: method is nil but UserService.UserByUsername was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	lockUserServiceMockUserByUsername.Lock()
	mock.calls.UserByUsername = append(mock.calls.UserByUsername, callInfo)
	lockUserServiceMockUserByUsername.Unlock()
	return mock.UserByUsernameFunc(username)
}

// UserByUsernameCalls gets all the calls that were made to UserByUsername.
// Check the length with:
//     len(mockedUserService.UserByUsernameCalls())
func (mock *UserServiceMock) UserByUsernameCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	lockUserServiceMockUserByUsername.RLock()
	calls = mock.calls.UserByUsername
	lockUserServiceMockUserByUsername.RUnlock()
	return calls
}

// Users calls UsersFunc.
func (mock *UserServiceMock) Users() ([]*User, error) {
	if mock.UsersFunc == nil {
		panic("UserServiceMock.UsersFunc: method is nil but UserService.Users was just called")
	}
	callInfo := struct {
	}{}
	lockUserServiceMockUsers.Lock()
	mock.calls.Users = append(mock.calls.Users, callInfo)
	lockUserServiceMockUsers.Unlock()
	return mock.UsersFunc()
}

// UsersCalls gets all the calls that were made to Users.
// Check the length with:
//     len(mockedUserService.UsersCalls())
func (mock *UserServiceMock) UsersCalls() []struct {
} {
	var calls []struct {
	}
	lockUserServiceMockUsers.RLock()
	calls = mock.calls.Users
	lockUserServiceMockUsers.RUnlock()
	return calls
}
