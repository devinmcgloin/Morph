// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockImageServiceMockCreateImage       sync.RWMutex
	lockImageServiceMockDeleteImage       sync.RWMutex
	lockImageServiceMockExistsByShortcode sync.RWMutex
	lockImageServiceMockFeature           sync.RWMutex
	lockImageServiceMockImageByID         sync.RWMutex
	lockImageServiceMockImageByShortcode  sync.RWMutex
	lockImageServiceMockImageColors       sync.RWMutex
	lockImageServiceMockImageLabels       sync.RWMutex
	lockImageServiceMockImageLocation     sync.RWMutex
	lockImageServiceMockImageMetadata     sync.RWMutex
	lockImageServiceMockImageSource       sync.RWMutex
	lockImageServiceMockImageStats        sync.RWMutex
	lockImageServiceMockImageTags         sync.RWMutex
	lockImageServiceMockImagesForUser     sync.RWMutex
	lockImageServiceMockSetImageMetadata  sync.RWMutex
	lockImageServiceMockUnFeature         sync.RWMutex
)

// ImageServiceMock is a mock implementation of ImageService.
//
//     func TestSomethingThatUsesImageService(t *testing.T) {
//
//         // make and configure a mocked ImageService
//         mockedImageService := &ImageServiceMock{
//             CreateImageFunc: func(i *Image) error {
// 	               panic("TODO: mock out the CreateImage method")
//             },
//             DeleteImageFunc: func(id uint64) error {
// 	               panic("TODO: mock out the DeleteImage method")
//             },
//             ExistsByShortcodeFunc: func(shortcode string) (bool, error) {
// 	               panic("TODO: mock out the ExistsByShortcode method")
//             },
//             FeatureFunc: func(id uint64, user uint64) error {
// 	               panic("TODO: mock out the Feature method")
//             },
//             ImageByIDFunc: func(id uint64) (*Image, error) {
// 	               panic("TODO: mock out the ImageByID method")
//             },
//             ImageByShortcodeFunc: func(shortcode string) (*Image, error) {
// 	               panic("TODO: mock out the ImageByShortcode method")
//             },
//             ImageColorsFunc: func(id uint64) (*[]Color, error) {
// 	               panic("TODO: mock out the ImageColors method")
//             },
//             ImageLabelsFunc: func(id uint64) (*[]Label, error) {
// 	               panic("TODO: mock out the ImageLabels method")
//             },
//             ImageLocationFunc: func(id uint64) (*Location, error) {
// 	               panic("TODO: mock out the ImageLocation method")
//             },
//             ImageMetadataFunc: func(id uint64) (*ImageMetadata, error) {
// 	               panic("TODO: mock out the ImageMetadata method")
//             },
//             ImageSourceFunc: func(id uint64) (*ImageSource, error) {
// 	               panic("TODO: mock out the ImageSource method")
//             },
//             ImageStatsFunc: func(id uint64) (*ImageStats, error) {
// 	               panic("TODO: mock out the ImageStats method")
//             },
//             ImageTagsFunc: func(id uint64) (*[]string, error) {
// 	               panic("TODO: mock out the ImageTags method")
//             },
//             ImagesForUserFunc: func(id uint64) (*[]Image, error) {
// 	               panic("TODO: mock out the ImagesForUser method")
//             },
//             SetImageMetadataFunc: func(id uint64, metadata ImageMetadata) error {
// 	               panic("TODO: mock out the SetImageMetadata method")
//             },
//             UnFeatureFunc: func(id uint64, user uint64) error {
// 	               panic("TODO: mock out the UnFeature method")
//             },
//         }
//
//         // TODO: use mockedImageService in code that requires ImageService
//         //       and then make assertions.
//
//     }
type ImageServiceMock struct {
	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(i *Image) error

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(id uint64) error

	// ExistsByShortcodeFunc mocks the ExistsByShortcode method.
	ExistsByShortcodeFunc func(shortcode string) (bool, error)

	// FeatureFunc mocks the Feature method.
	FeatureFunc func(id uint64, user uint64) error

	// ImageByIDFunc mocks the ImageByID method.
	ImageByIDFunc func(id uint64) (*Image, error)

	// ImageByShortcodeFunc mocks the ImageByShortcode method.
	ImageByShortcodeFunc func(shortcode string) (*Image, error)

	// ImageColorsFunc mocks the ImageColors method.
	ImageColorsFunc func(id uint64) (*[]Color, error)

	// ImageLabelsFunc mocks the ImageLabels method.
	ImageLabelsFunc func(id uint64) (*[]Label, error)

	// ImageLocationFunc mocks the ImageLocation method.
	ImageLocationFunc func(id uint64) (*Location, error)

	// ImageMetadataFunc mocks the ImageMetadata method.
	ImageMetadataFunc func(id uint64) (*ImageMetadata, error)

	// ImageSourceFunc mocks the ImageSource method.
	ImageSourceFunc func(id uint64) (*ImageSource, error)

	// ImageStatsFunc mocks the ImageStats method.
	ImageStatsFunc func(id uint64) (*ImageStats, error)

	// ImageTagsFunc mocks the ImageTags method.
	ImageTagsFunc func(id uint64) (*[]string, error)

	// ImagesForUserFunc mocks the ImagesForUser method.
	ImagesForUserFunc func(id uint64) (*[]Image, error)

	// SetImageMetadataFunc mocks the SetImageMetadata method.
	SetImageMetadataFunc func(id uint64, metadata ImageMetadata) error

	// UnFeatureFunc mocks the UnFeature method.
	UnFeatureFunc func(id uint64, user uint64) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// I is the i argument value.
			I *Image
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ExistsByShortcode holds details about calls to the ExistsByShortcode method.
		ExistsByShortcode []struct {
			// Shortcode is the shortcode argument value.
			Shortcode string
		}
		// Feature holds details about calls to the Feature method.
		Feature []struct {
			// ID is the id argument value.
			ID uint64
			// User is the user argument value.
			User uint64
		}
		// ImageByID holds details about calls to the ImageByID method.
		ImageByID []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageByShortcode holds details about calls to the ImageByShortcode method.
		ImageByShortcode []struct {
			// Shortcode is the shortcode argument value.
			Shortcode string
		}
		// ImageColors holds details about calls to the ImageColors method.
		ImageColors []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageLabels holds details about calls to the ImageLabels method.
		ImageLabels []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageLocation holds details about calls to the ImageLocation method.
		ImageLocation []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageMetadata holds details about calls to the ImageMetadata method.
		ImageMetadata []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageSource holds details about calls to the ImageSource method.
		ImageSource []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageStats holds details about calls to the ImageStats method.
		ImageStats []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImageTags holds details about calls to the ImageTags method.
		ImageTags []struct {
			// ID is the id argument value.
			ID uint64
		}
		// ImagesForUser holds details about calls to the ImagesForUser method.
		ImagesForUser []struct {
			// ID is the id argument value.
			ID uint64
		}
		// SetImageMetadata holds details about calls to the SetImageMetadata method.
		SetImageMetadata []struct {
			// ID is the id argument value.
			ID uint64
			// Metadata is the metadata argument value.
			Metadata ImageMetadata
		}
		// UnFeature holds details about calls to the UnFeature method.
		UnFeature []struct {
			// ID is the id argument value.
			ID uint64
			// User is the user argument value.
			User uint64
		}
	}
}

// CreateImage calls CreateImageFunc.
func (mock *ImageServiceMock) CreateImage(i *Image) error {
	if mock.CreateImageFunc == nil {
		panic("ImageServiceMock.CreateImageFunc: method is nil but ImageService.CreateImage was just called")
	}
	callInfo := struct {
		I *Image
	}{
		I: i,
	}
	lockImageServiceMockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	lockImageServiceMockCreateImage.Unlock()
	return mock.CreateImageFunc(i)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//     len(mockedImageService.CreateImageCalls())
func (mock *ImageServiceMock) CreateImageCalls() []struct {
	I *Image
} {
	var calls []struct {
		I *Image
	}
	lockImageServiceMockCreateImage.RLock()
	calls = mock.calls.CreateImage
	lockImageServiceMockCreateImage.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *ImageServiceMock) DeleteImage(id uint64) error {
	if mock.DeleteImageFunc == nil {
		panic("ImageServiceMock.DeleteImageFunc: method is nil but ImageService.DeleteImage was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	lockImageServiceMockDeleteImage.Unlock()
	return mock.DeleteImageFunc(id)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//     len(mockedImageService.DeleteImageCalls())
func (mock *ImageServiceMock) DeleteImageCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	lockImageServiceMockDeleteImage.RUnlock()
	return calls
}

// ExistsByShortcode calls ExistsByShortcodeFunc.
func (mock *ImageServiceMock) ExistsByShortcode(shortcode string) (bool, error) {
	if mock.ExistsByShortcodeFunc == nil {
		panic("ImageServiceMock.ExistsByShortcodeFunc: method is nil but ImageService.ExistsByShortcode was just called")
	}
	callInfo := struct {
		Shortcode string
	}{
		Shortcode: shortcode,
	}
	lockImageServiceMockExistsByShortcode.Lock()
	mock.calls.ExistsByShortcode = append(mock.calls.ExistsByShortcode, callInfo)
	lockImageServiceMockExistsByShortcode.Unlock()
	return mock.ExistsByShortcodeFunc(shortcode)
}

// ExistsByShortcodeCalls gets all the calls that were made to ExistsByShortcode.
// Check the length with:
//     len(mockedImageService.ExistsByShortcodeCalls())
func (mock *ImageServiceMock) ExistsByShortcodeCalls() []struct {
	Shortcode string
} {
	var calls []struct {
		Shortcode string
	}
	lockImageServiceMockExistsByShortcode.RLock()
	calls = mock.calls.ExistsByShortcode
	lockImageServiceMockExistsByShortcode.RUnlock()
	return calls
}

// Feature calls FeatureFunc.
func (mock *ImageServiceMock) Feature(id uint64, user uint64) error {
	if mock.FeatureFunc == nil {
		panic("ImageServiceMock.FeatureFunc: method is nil but ImageService.Feature was just called")
	}
	callInfo := struct {
		ID   uint64
		User uint64
	}{
		ID:   id,
		User: user,
	}
	lockImageServiceMockFeature.Lock()
	mock.calls.Feature = append(mock.calls.Feature, callInfo)
	lockImageServiceMockFeature.Unlock()
	return mock.FeatureFunc(id, user)
}

// FeatureCalls gets all the calls that were made to Feature.
// Check the length with:
//     len(mockedImageService.FeatureCalls())
func (mock *ImageServiceMock) FeatureCalls() []struct {
	ID   uint64
	User uint64
} {
	var calls []struct {
		ID   uint64
		User uint64
	}
	lockImageServiceMockFeature.RLock()
	calls = mock.calls.Feature
	lockImageServiceMockFeature.RUnlock()
	return calls
}

// ImageByID calls ImageByIDFunc.
func (mock *ImageServiceMock) ImageByID(id uint64) (*Image, error) {
	if mock.ImageByIDFunc == nil {
		panic("ImageServiceMock.ImageByIDFunc: method is nil but ImageService.ImageByID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageByID.Lock()
	mock.calls.ImageByID = append(mock.calls.ImageByID, callInfo)
	lockImageServiceMockImageByID.Unlock()
	return mock.ImageByIDFunc(id)
}

// ImageByIDCalls gets all the calls that were made to ImageByID.
// Check the length with:
//     len(mockedImageService.ImageByIDCalls())
func (mock *ImageServiceMock) ImageByIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageByID.RLock()
	calls = mock.calls.ImageByID
	lockImageServiceMockImageByID.RUnlock()
	return calls
}

// ImageByShortcode calls ImageByShortcodeFunc.
func (mock *ImageServiceMock) ImageByShortcode(shortcode string) (*Image, error) {
	if mock.ImageByShortcodeFunc == nil {
		panic("ImageServiceMock.ImageByShortcodeFunc: method is nil but ImageService.ImageByShortcode was just called")
	}
	callInfo := struct {
		Shortcode string
	}{
		Shortcode: shortcode,
	}
	lockImageServiceMockImageByShortcode.Lock()
	mock.calls.ImageByShortcode = append(mock.calls.ImageByShortcode, callInfo)
	lockImageServiceMockImageByShortcode.Unlock()
	return mock.ImageByShortcodeFunc(shortcode)
}

// ImageByShortcodeCalls gets all the calls that were made to ImageByShortcode.
// Check the length with:
//     len(mockedImageService.ImageByShortcodeCalls())
func (mock *ImageServiceMock) ImageByShortcodeCalls() []struct {
	Shortcode string
} {
	var calls []struct {
		Shortcode string
	}
	lockImageServiceMockImageByShortcode.RLock()
	calls = mock.calls.ImageByShortcode
	lockImageServiceMockImageByShortcode.RUnlock()
	return calls
}

// ImageColors calls ImageColorsFunc.
func (mock *ImageServiceMock) ImageColors(id uint64) (*[]Color, error) {
	if mock.ImageColorsFunc == nil {
		panic("ImageServiceMock.ImageColorsFunc: method is nil but ImageService.ImageColors was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageColors.Lock()
	mock.calls.ImageColors = append(mock.calls.ImageColors, callInfo)
	lockImageServiceMockImageColors.Unlock()
	return mock.ImageColorsFunc(id)
}

// ImageColorsCalls gets all the calls that were made to ImageColors.
// Check the length with:
//     len(mockedImageService.ImageColorsCalls())
func (mock *ImageServiceMock) ImageColorsCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageColors.RLock()
	calls = mock.calls.ImageColors
	lockImageServiceMockImageColors.RUnlock()
	return calls
}

// ImageLabels calls ImageLabelsFunc.
func (mock *ImageServiceMock) ImageLabels(id uint64) (*[]Label, error) {
	if mock.ImageLabelsFunc == nil {
		panic("ImageServiceMock.ImageLabelsFunc: method is nil but ImageService.ImageLabels was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageLabels.Lock()
	mock.calls.ImageLabels = append(mock.calls.ImageLabels, callInfo)
	lockImageServiceMockImageLabels.Unlock()
	return mock.ImageLabelsFunc(id)
}

// ImageLabelsCalls gets all the calls that were made to ImageLabels.
// Check the length with:
//     len(mockedImageService.ImageLabelsCalls())
func (mock *ImageServiceMock) ImageLabelsCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageLabels.RLock()
	calls = mock.calls.ImageLabels
	lockImageServiceMockImageLabels.RUnlock()
	return calls
}

// ImageLocation calls ImageLocationFunc.
func (mock *ImageServiceMock) ImageLocation(id uint64) (*Location, error) {
	if mock.ImageLocationFunc == nil {
		panic("ImageServiceMock.ImageLocationFunc: method is nil but ImageService.ImageLocation was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageLocation.Lock()
	mock.calls.ImageLocation = append(mock.calls.ImageLocation, callInfo)
	lockImageServiceMockImageLocation.Unlock()
	return mock.ImageLocationFunc(id)
}

// ImageLocationCalls gets all the calls that were made to ImageLocation.
// Check the length with:
//     len(mockedImageService.ImageLocationCalls())
func (mock *ImageServiceMock) ImageLocationCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageLocation.RLock()
	calls = mock.calls.ImageLocation
	lockImageServiceMockImageLocation.RUnlock()
	return calls
}

// ImageMetadata calls ImageMetadataFunc.
func (mock *ImageServiceMock) ImageMetadata(id uint64) (*ImageMetadata, error) {
	if mock.ImageMetadataFunc == nil {
		panic("ImageServiceMock.ImageMetadataFunc: method is nil but ImageService.ImageMetadata was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageMetadata.Lock()
	mock.calls.ImageMetadata = append(mock.calls.ImageMetadata, callInfo)
	lockImageServiceMockImageMetadata.Unlock()
	return mock.ImageMetadataFunc(id)
}

// ImageMetadataCalls gets all the calls that were made to ImageMetadata.
// Check the length with:
//     len(mockedImageService.ImageMetadataCalls())
func (mock *ImageServiceMock) ImageMetadataCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageMetadata.RLock()
	calls = mock.calls.ImageMetadata
	lockImageServiceMockImageMetadata.RUnlock()
	return calls
}

// ImageSource calls ImageSourceFunc.
func (mock *ImageServiceMock) ImageSource(id uint64) (*ImageSource, error) {
	if mock.ImageSourceFunc == nil {
		panic("ImageServiceMock.ImageSourceFunc: method is nil but ImageService.ImageSource was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageSource.Lock()
	mock.calls.ImageSource = append(mock.calls.ImageSource, callInfo)
	lockImageServiceMockImageSource.Unlock()
	return mock.ImageSourceFunc(id)
}

// ImageSourceCalls gets all the calls that were made to ImageSource.
// Check the length with:
//     len(mockedImageService.ImageSourceCalls())
func (mock *ImageServiceMock) ImageSourceCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageSource.RLock()
	calls = mock.calls.ImageSource
	lockImageServiceMockImageSource.RUnlock()
	return calls
}

// ImageStats calls ImageStatsFunc.
func (mock *ImageServiceMock) ImageStats(id uint64) (*ImageStats, error) {
	if mock.ImageStatsFunc == nil {
		panic("ImageServiceMock.ImageStatsFunc: method is nil but ImageService.ImageStats was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageStats.Lock()
	mock.calls.ImageStats = append(mock.calls.ImageStats, callInfo)
	lockImageServiceMockImageStats.Unlock()
	return mock.ImageStatsFunc(id)
}

// ImageStatsCalls gets all the calls that were made to ImageStats.
// Check the length with:
//     len(mockedImageService.ImageStatsCalls())
func (mock *ImageServiceMock) ImageStatsCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageStats.RLock()
	calls = mock.calls.ImageStats
	lockImageServiceMockImageStats.RUnlock()
	return calls
}

// ImageTags calls ImageTagsFunc.
func (mock *ImageServiceMock) ImageTags(id uint64) (*[]string, error) {
	if mock.ImageTagsFunc == nil {
		panic("ImageServiceMock.ImageTagsFunc: method is nil but ImageService.ImageTags was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImageTags.Lock()
	mock.calls.ImageTags = append(mock.calls.ImageTags, callInfo)
	lockImageServiceMockImageTags.Unlock()
	return mock.ImageTagsFunc(id)
}

// ImageTagsCalls gets all the calls that were made to ImageTags.
// Check the length with:
//     len(mockedImageService.ImageTagsCalls())
func (mock *ImageServiceMock) ImageTagsCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImageTags.RLock()
	calls = mock.calls.ImageTags
	lockImageServiceMockImageTags.RUnlock()
	return calls
}

// ImagesForUser calls ImagesForUserFunc.
func (mock *ImageServiceMock) ImagesForUser(id uint64) (*[]Image, error) {
	if mock.ImagesForUserFunc == nil {
		panic("ImageServiceMock.ImagesForUserFunc: method is nil but ImageService.ImagesForUser was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockImageServiceMockImagesForUser.Lock()
	mock.calls.ImagesForUser = append(mock.calls.ImagesForUser, callInfo)
	lockImageServiceMockImagesForUser.Unlock()
	return mock.ImagesForUserFunc(id)
}

// ImagesForUserCalls gets all the calls that were made to ImagesForUser.
// Check the length with:
//     len(mockedImageService.ImagesForUserCalls())
func (mock *ImageServiceMock) ImagesForUserCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockImageServiceMockImagesForUser.RLock()
	calls = mock.calls.ImagesForUser
	lockImageServiceMockImagesForUser.RUnlock()
	return calls
}

// SetImageMetadata calls SetImageMetadataFunc.
func (mock *ImageServiceMock) SetImageMetadata(id uint64, metadata ImageMetadata) error {
	if mock.SetImageMetadataFunc == nil {
		panic("ImageServiceMock.SetImageMetadataFunc: method is nil but ImageService.SetImageMetadata was just called")
	}
	callInfo := struct {
		ID       uint64
		Metadata ImageMetadata
	}{
		ID:       id,
		Metadata: metadata,
	}
	lockImageServiceMockSetImageMetadata.Lock()
	mock.calls.SetImageMetadata = append(mock.calls.SetImageMetadata, callInfo)
	lockImageServiceMockSetImageMetadata.Unlock()
	return mock.SetImageMetadataFunc(id, metadata)
}

// SetImageMetadataCalls gets all the calls that were made to SetImageMetadata.
// Check the length with:
//     len(mockedImageService.SetImageMetadataCalls())
func (mock *ImageServiceMock) SetImageMetadataCalls() []struct {
	ID       uint64
	Metadata ImageMetadata
} {
	var calls []struct {
		ID       uint64
		Metadata ImageMetadata
	}
	lockImageServiceMockSetImageMetadata.RLock()
	calls = mock.calls.SetImageMetadata
	lockImageServiceMockSetImageMetadata.RUnlock()
	return calls
}

// UnFeature calls UnFeatureFunc.
func (mock *ImageServiceMock) UnFeature(id uint64, user uint64) error {
	if mock.UnFeatureFunc == nil {
		panic("ImageServiceMock.UnFeatureFunc: method is nil but ImageService.UnFeature was just called")
	}
	callInfo := struct {
		ID   uint64
		User uint64
	}{
		ID:   id,
		User: user,
	}
	lockImageServiceMockUnFeature.Lock()
	mock.calls.UnFeature = append(mock.calls.UnFeature, callInfo)
	lockImageServiceMockUnFeature.Unlock()
	return mock.UnFeatureFunc(id, user)
}

// UnFeatureCalls gets all the calls that were made to UnFeature.
// Check the length with:
//     len(mockedImageService.UnFeatureCalls())
func (mock *ImageServiceMock) UnFeatureCalls() []struct {
	ID   uint64
	User uint64
} {
	var calls []struct {
		ID   uint64
		User uint64
	}
	lockImageServiceMockUnFeature.RLock()
	calls = mock.calls.UnFeature
	lockImageServiceMockUnFeature.RUnlock()
	return calls
}
