// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockStreamServiceMockCreateStream     sync.RWMutex
	lockStreamServiceMockSetDiscription   sync.RWMutex
	lockStreamServiceMockSetTitle         sync.RWMutex
	lockStreamServiceMockStreamByID       sync.RWMutex
	lockStreamServiceMockStreamsByCreator sync.RWMutex
)

// StreamServiceMock is a mock implementation of StreamService.
//
//     func TestSomethingThatUsesStreamService(t *testing.T) {
//
//         // make and configure a mocked StreamService
//         mockedStreamService := &StreamServiceMock{
//             CreateStreamFunc: func(creator uint64, title string) error {
// 	               panic("TODO: mock out the CreateStream method")
//             },
//             SetDiscriptionFunc: func(description string) error {
// 	               panic("TODO: mock out the SetDiscription method")
//             },
//             SetTitleFunc: func(title string) error {
// 	               panic("TODO: mock out the SetTitle method")
//             },
//             StreamByIDFunc: func(id uint64) (*Stream, error) {
// 	               panic("TODO: mock out the StreamByID method")
//             },
//             StreamsByCreatorFunc: func(userID uint64) (*[]Stream, error) {
// 	               panic("TODO: mock out the StreamsByCreator method")
//             },
//         }
//
//         // TODO: use mockedStreamService in code that requires StreamService
//         //       and then make assertions.
//
//     }
type StreamServiceMock struct {
	// CreateStreamFunc mocks the CreateStream method.
	CreateStreamFunc func(creator uint64, title string) error

	// SetDiscriptionFunc mocks the SetDiscription method.
	SetDiscriptionFunc func(description string) error

	// SetTitleFunc mocks the SetTitle method.
	SetTitleFunc func(title string) error

	// StreamByIDFunc mocks the StreamByID method.
	StreamByIDFunc func(id uint64) (*Stream, error)

	// StreamsByCreatorFunc mocks the StreamsByCreator method.
	StreamsByCreatorFunc func(userID uint64) (*[]Stream, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateStream holds details about calls to the CreateStream method.
		CreateStream []struct {
			// Creator is the creator argument value.
			Creator uint64
			// Title is the title argument value.
			Title string
		}
		// SetDiscription holds details about calls to the SetDiscription method.
		SetDiscription []struct {
			// Description is the description argument value.
			Description string
		}
		// SetTitle holds details about calls to the SetTitle method.
		SetTitle []struct {
			// Title is the title argument value.
			Title string
		}
		// StreamByID holds details about calls to the StreamByID method.
		StreamByID []struct {
			// ID is the id argument value.
			ID uint64
		}
		// StreamsByCreator holds details about calls to the StreamsByCreator method.
		StreamsByCreator []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
	}
}

// CreateStream calls CreateStreamFunc.
func (mock *StreamServiceMock) CreateStream(creator uint64, title string) error {
	if mock.CreateStreamFunc == nil {
		panic("StreamServiceMock.CreateStreamFunc: method is nil but StreamService.CreateStream was just called")
	}
	callInfo := struct {
		Creator uint64
		Title   string
	}{
		Creator: creator,
		Title:   title,
	}
	lockStreamServiceMockCreateStream.Lock()
	mock.calls.CreateStream = append(mock.calls.CreateStream, callInfo)
	lockStreamServiceMockCreateStream.Unlock()
	return mock.CreateStreamFunc(creator, title)
}

// CreateStreamCalls gets all the calls that were made to CreateStream.
// Check the length with:
//     len(mockedStreamService.CreateStreamCalls())
func (mock *StreamServiceMock) CreateStreamCalls() []struct {
	Creator uint64
	Title   string
} {
	var calls []struct {
		Creator uint64
		Title   string
	}
	lockStreamServiceMockCreateStream.RLock()
	calls = mock.calls.CreateStream
	lockStreamServiceMockCreateStream.RUnlock()
	return calls
}

// SetDiscription calls SetDiscriptionFunc.
func (mock *StreamServiceMock) SetDiscription(description string) error {
	if mock.SetDiscriptionFunc == nil {
		panic("StreamServiceMock.SetDiscriptionFunc: method is nil but StreamService.SetDiscription was just called")
	}
	callInfo := struct {
		Description string
	}{
		Description: description,
	}
	lockStreamServiceMockSetDiscription.Lock()
	mock.calls.SetDiscription = append(mock.calls.SetDiscription, callInfo)
	lockStreamServiceMockSetDiscription.Unlock()
	return mock.SetDiscriptionFunc(description)
}

// SetDiscriptionCalls gets all the calls that were made to SetDiscription.
// Check the length with:
//     len(mockedStreamService.SetDiscriptionCalls())
func (mock *StreamServiceMock) SetDiscriptionCalls() []struct {
	Description string
} {
	var calls []struct {
		Description string
	}
	lockStreamServiceMockSetDiscription.RLock()
	calls = mock.calls.SetDiscription
	lockStreamServiceMockSetDiscription.RUnlock()
	return calls
}

// SetTitle calls SetTitleFunc.
func (mock *StreamServiceMock) SetTitle(title string) error {
	if mock.SetTitleFunc == nil {
		panic("StreamServiceMock.SetTitleFunc: method is nil but StreamService.SetTitle was just called")
	}
	callInfo := struct {
		Title string
	}{
		Title: title,
	}
	lockStreamServiceMockSetTitle.Lock()
	mock.calls.SetTitle = append(mock.calls.SetTitle, callInfo)
	lockStreamServiceMockSetTitle.Unlock()
	return mock.SetTitleFunc(title)
}

// SetTitleCalls gets all the calls that were made to SetTitle.
// Check the length with:
//     len(mockedStreamService.SetTitleCalls())
func (mock *StreamServiceMock) SetTitleCalls() []struct {
	Title string
} {
	var calls []struct {
		Title string
	}
	lockStreamServiceMockSetTitle.RLock()
	calls = mock.calls.SetTitle
	lockStreamServiceMockSetTitle.RUnlock()
	return calls
}

// StreamByID calls StreamByIDFunc.
func (mock *StreamServiceMock) StreamByID(id uint64) (*Stream, error) {
	if mock.StreamByIDFunc == nil {
		panic("StreamServiceMock.StreamByIDFunc: method is nil but StreamService.StreamByID was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockStreamServiceMockStreamByID.Lock()
	mock.calls.StreamByID = append(mock.calls.StreamByID, callInfo)
	lockStreamServiceMockStreamByID.Unlock()
	return mock.StreamByIDFunc(id)
}

// StreamByIDCalls gets all the calls that were made to StreamByID.
// Check the length with:
//     len(mockedStreamService.StreamByIDCalls())
func (mock *StreamServiceMock) StreamByIDCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockStreamServiceMockStreamByID.RLock()
	calls = mock.calls.StreamByID
	lockStreamServiceMockStreamByID.RUnlock()
	return calls
}

// StreamsByCreator calls StreamsByCreatorFunc.
func (mock *StreamServiceMock) StreamsByCreator(userID uint64) (*[]Stream, error) {
	if mock.StreamsByCreatorFunc == nil {
		panic("StreamServiceMock.StreamsByCreatorFunc: method is nil but StreamService.StreamsByCreator was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockStreamServiceMockStreamsByCreator.Lock()
	mock.calls.StreamsByCreator = append(mock.calls.StreamsByCreator, callInfo)
	lockStreamServiceMockStreamsByCreator.Unlock()
	return mock.StreamsByCreatorFunc(userID)
}

// StreamsByCreatorCalls gets all the calls that were made to StreamsByCreator.
// Check the length with:
//     len(mockedStreamService.StreamsByCreatorCalls())
func (mock *StreamServiceMock) StreamsByCreatorCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockStreamServiceMockStreamsByCreator.RLock()
	calls = mock.calls.StreamsByCreator
	lockStreamServiceMockStreamsByCreator.RUnlock()
	return calls
}
