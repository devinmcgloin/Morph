// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

var (
	lockTagServiceMockCreateTag        sync.RWMutex
	lockTagServiceMockImagesForTag     sync.RWMutex
	lockTagServiceMockTagByDescription sync.RWMutex
	lockTagServiceMockTagByID          sync.RWMutex
	lockTagServiceMockTagImage         sync.RWMutex
	lockTagServiceMockUnTagImage       sync.RWMutex
)

// TagServiceMock is a mock implementation of TagService.
//
//     func TestSomethingThatUsesTagService(t *testing.T) {
//
//         // make and configure a mocked TagService
//         mockedTagService := &TagServiceMock{
//             CreateTagFunc: func(ctx context.Context, desc string) (*Tag, error) {
// 	               panic("TODO: mock out the CreateTag method")
//             },
//             ImagesForTagFunc: func(ctx context.Context, id uint64) (*[]Image, error) {
// 	               panic("TODO: mock out the ImagesForTag method")
//             },
//             TagByDescriptionFunc: func(ctx context.Context, desc string) (*Tag, error) {
// 	               panic("TODO: mock out the TagByDescription method")
//             },
//             TagByIDFunc: func(ctx context.Context, id uint64) (*Tag, error) {
// 	               panic("TODO: mock out the TagByID method")
//             },
//             TagImageFunc: func(ctx context.Context, id uint64, imageID uint64) error {
// 	               panic("TODO: mock out the TagImage method")
//             },
//             UnTagImageFunc: func(ctx context.Context, id uint64, imageID uint64) error {
// 	               panic("TODO: mock out the UnTagImage method")
//             },
//         }
//
//         // TODO: use mockedTagService in code that requires TagService
//         //       and then make assertions.
//
//     }
type TagServiceMock struct {
	// CreateTagFunc mocks the CreateTag method.
	CreateTagFunc func(ctx context.Context, desc string) (*Tag, error)

	// ImagesForTagFunc mocks the ImagesForTag method.
	ImagesForTagFunc func(ctx context.Context, id uint64) (*[]Image, error)

	// TagByDescriptionFunc mocks the TagByDescription method.
	TagByDescriptionFunc func(ctx context.Context, desc string) (*Tag, error)

	// TagByIDFunc mocks the TagByID method.
	TagByIDFunc func(ctx context.Context, id uint64) (*Tag, error)

	// TagImageFunc mocks the TagImage method.
	TagImageFunc func(ctx context.Context, id uint64, imageID uint64) error

	// UnTagImageFunc mocks the UnTagImage method.
	UnTagImageFunc func(ctx context.Context, id uint64, imageID uint64) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateTag holds details about calls to the CreateTag method.
		CreateTag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Desc is the desc argument value.
			Desc string
		}
		// ImagesForTag holds details about calls to the ImagesForTag method.
		ImagesForTag []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
		}
		// TagByDescription holds details about calls to the TagByDescription method.
		TagByDescription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Desc is the desc argument value.
			Desc string
		}
		// TagByID holds details about calls to the TagByID method.
		TagByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
		}
		// TagImage holds details about calls to the TagImage method.
		TagImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
			// ImageID is the imageID argument value.
			ImageID uint64
		}
		// UnTagImage holds details about calls to the UnTagImage method.
		UnTagImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
			// ImageID is the imageID argument value.
			ImageID uint64
		}
	}
}

// CreateTag calls CreateTagFunc.
func (mock *TagServiceMock) CreateTag(ctx context.Context, desc string) (*Tag, error) {
	if mock.CreateTagFunc == nil {
		panic("TagServiceMock.CreateTagFunc: method is nil but TagService.CreateTag was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Desc string
	}{
		Ctx:  ctx,
		Desc: desc,
	}
	lockTagServiceMockCreateTag.Lock()
	mock.calls.CreateTag = append(mock.calls.CreateTag, callInfo)
	lockTagServiceMockCreateTag.Unlock()
	return mock.CreateTagFunc(ctx, desc)
}

// CreateTagCalls gets all the calls that were made to CreateTag.
// Check the length with:
//     len(mockedTagService.CreateTagCalls())
func (mock *TagServiceMock) CreateTagCalls() []struct {
	Ctx  context.Context
	Desc string
} {
	var calls []struct {
		Ctx  context.Context
		Desc string
	}
	lockTagServiceMockCreateTag.RLock()
	calls = mock.calls.CreateTag
	lockTagServiceMockCreateTag.RUnlock()
	return calls
}

// ImagesForTag calls ImagesForTagFunc.
func (mock *TagServiceMock) ImagesForTag(ctx context.Context, id uint64) (*[]Image, error) {
	if mock.ImagesForTagFunc == nil {
		panic("TagServiceMock.ImagesForTagFunc: method is nil but TagService.ImagesForTag was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockTagServiceMockImagesForTag.Lock()
	mock.calls.ImagesForTag = append(mock.calls.ImagesForTag, callInfo)
	lockTagServiceMockImagesForTag.Unlock()
	return mock.ImagesForTagFunc(ctx, id)
}

// ImagesForTagCalls gets all the calls that were made to ImagesForTag.
// Check the length with:
//     len(mockedTagService.ImagesForTagCalls())
func (mock *TagServiceMock) ImagesForTagCalls() []struct {
	Ctx context.Context
	ID  uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  uint64
	}
	lockTagServiceMockImagesForTag.RLock()
	calls = mock.calls.ImagesForTag
	lockTagServiceMockImagesForTag.RUnlock()
	return calls
}

// TagByDescription calls TagByDescriptionFunc.
func (mock *TagServiceMock) TagByDescription(ctx context.Context, desc string) (*Tag, error) {
	if mock.TagByDescriptionFunc == nil {
		panic("TagServiceMock.TagByDescriptionFunc: method is nil but TagService.TagByDescription was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Desc string
	}{
		Ctx:  ctx,
		Desc: desc,
	}
	lockTagServiceMockTagByDescription.Lock()
	mock.calls.TagByDescription = append(mock.calls.TagByDescription, callInfo)
	lockTagServiceMockTagByDescription.Unlock()
	return mock.TagByDescriptionFunc(ctx, desc)
}

// TagByDescriptionCalls gets all the calls that were made to TagByDescription.
// Check the length with:
//     len(mockedTagService.TagByDescriptionCalls())
func (mock *TagServiceMock) TagByDescriptionCalls() []struct {
	Ctx  context.Context
	Desc string
} {
	var calls []struct {
		Ctx  context.Context
		Desc string
	}
	lockTagServiceMockTagByDescription.RLock()
	calls = mock.calls.TagByDescription
	lockTagServiceMockTagByDescription.RUnlock()
	return calls
}

// TagByID calls TagByIDFunc.
func (mock *TagServiceMock) TagByID(ctx context.Context, id uint64) (*Tag, error) {
	if mock.TagByIDFunc == nil {
		panic("TagServiceMock.TagByIDFunc: method is nil but TagService.TagByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockTagServiceMockTagByID.Lock()
	mock.calls.TagByID = append(mock.calls.TagByID, callInfo)
	lockTagServiceMockTagByID.Unlock()
	return mock.TagByIDFunc(ctx, id)
}

// TagByIDCalls gets all the calls that were made to TagByID.
// Check the length with:
//     len(mockedTagService.TagByIDCalls())
func (mock *TagServiceMock) TagByIDCalls() []struct {
	Ctx context.Context
	ID  uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  uint64
	}
	lockTagServiceMockTagByID.RLock()
	calls = mock.calls.TagByID
	lockTagServiceMockTagByID.RUnlock()
	return calls
}

// TagImage calls TagImageFunc.
func (mock *TagServiceMock) TagImage(ctx context.Context, id uint64, imageID uint64) error {
	if mock.TagImageFunc == nil {
		panic("TagServiceMock.TagImageFunc: method is nil but TagService.TagImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      uint64
		ImageID uint64
	}{
		Ctx:     ctx,
		ID:      id,
		ImageID: imageID,
	}
	lockTagServiceMockTagImage.Lock()
	mock.calls.TagImage = append(mock.calls.TagImage, callInfo)
	lockTagServiceMockTagImage.Unlock()
	return mock.TagImageFunc(ctx, id, imageID)
}

// TagImageCalls gets all the calls that were made to TagImage.
// Check the length with:
//     len(mockedTagService.TagImageCalls())
func (mock *TagServiceMock) TagImageCalls() []struct {
	Ctx     context.Context
	ID      uint64
	ImageID uint64
} {
	var calls []struct {
		Ctx     context.Context
		ID      uint64
		ImageID uint64
	}
	lockTagServiceMockTagImage.RLock()
	calls = mock.calls.TagImage
	lockTagServiceMockTagImage.RUnlock()
	return calls
}

// UnTagImage calls UnTagImageFunc.
func (mock *TagServiceMock) UnTagImage(ctx context.Context, id uint64, imageID uint64) error {
	if mock.UnTagImageFunc == nil {
		panic("TagServiceMock.UnTagImageFunc: method is nil but TagService.UnTagImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      uint64
		ImageID uint64
	}{
		Ctx:     ctx,
		ID:      id,
		ImageID: imageID,
	}
	lockTagServiceMockUnTagImage.Lock()
	mock.calls.UnTagImage = append(mock.calls.UnTagImage, callInfo)
	lockTagServiceMockUnTagImage.Unlock()
	return mock.UnTagImageFunc(ctx, id, imageID)
}

// UnTagImageCalls gets all the calls that were made to UnTagImage.
// Check the length with:
//     len(mockedTagService.UnTagImageCalls())
func (mock *TagServiceMock) UnTagImageCalls() []struct {
	Ctx     context.Context
	ID      uint64
	ImageID uint64
} {
	var calls []struct {
		Ctx     context.Context
		ID      uint64
		ImageID uint64
	}
	lockTagServiceMockUnTagImage.RLock()
	calls = mock.calls.UnTagImage
	lockTagServiceMockUnTagImage.RUnlock()
	return calls
}
