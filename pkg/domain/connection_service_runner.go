// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockConnectionServiceMockFavorite          sync.RWMutex
	lockConnectionServiceMockFavoritesForImage sync.RWMutex
	lockConnectionServiceMockFavoritesForUser  sync.RWMutex
	lockConnectionServiceMockFollowStream      sync.RWMutex
	lockConnectionServiceMockFollowUser        sync.RWMutex
	lockConnectionServiceMockStreamFollowers   sync.RWMutex
	lockConnectionServiceMockStreamsFollowedBy sync.RWMutex
	lockConnectionServiceMockUnFavorite        sync.RWMutex
	lockConnectionServiceMockUnFollowStream    sync.RWMutex
	lockConnectionServiceMockUnFollowUser      sync.RWMutex
	lockConnectionServiceMockUserFollowedBy    sync.RWMutex
	lockConnectionServiceMockUserFollowers     sync.RWMutex
)

// ConnectionServiceMock is a mock implementation of ConnectionService.
//
//     func TestSomethingThatUsesConnectionService(t *testing.T) {
//
//         // make and configure a mocked ConnectionService
//         mockedConnectionService := &ConnectionServiceMock{
//             FavoriteFunc: func(userID uint64, imageID uint64) error {
// 	               panic("TODO: mock out the Favorite method")
//             },
//             FavoritesForImageFunc: func(imageID uint8) (*[]User, error) {
// 	               panic("TODO: mock out the FavoritesForImage method")
//             },
//             FavoritesForUserFunc: func(userID uint8) (*[]Image, error) {
// 	               panic("TODO: mock out the FavoritesForUser method")
//             },
//             FollowStreamFunc: func(userID uint64, followID uint64) error {
// 	               panic("TODO: mock out the FollowStream method")
//             },
//             FollowUserFunc: func(userID uint64, followID uint64) error {
// 	               panic("TODO: mock out the FollowUser method")
//             },
//             StreamFollowersFunc: func(streamID uint64) (*[]User, error) {
// 	               panic("TODO: mock out the StreamFollowers method")
//             },
//             StreamsFollowedByFunc: func(userID uint64) (*[]Stream, error) {
// 	               panic("TODO: mock out the StreamsFollowedBy method")
//             },
//             UnFavoriteFunc: func(userID uint64, imageID uint64) error {
// 	               panic("TODO: mock out the UnFavorite method")
//             },
//             UnFollowStreamFunc: func(userID uint64, followID uint64) error {
// 	               panic("TODO: mock out the UnFollowStream method")
//             },
//             UnFollowUserFunc: func(userID uint64, followID uint64) error {
// 	               panic("TODO: mock out the UnFollowUser method")
//             },
//             UserFollowedByFunc: func(userID uint64) (*[]User, error) {
// 	               panic("TODO: mock out the UserFollowedBy method")
//             },
//             UserFollowersFunc: func(userID uint64) (*[]User, error) {
// 	               panic("TODO: mock out the UserFollowers method")
//             },
//         }
//
//         // TODO: use mockedConnectionService in code that requires ConnectionService
//         //       and then make assertions.
//
//     }
type ConnectionServiceMock struct {
	// FavoriteFunc mocks the Favorite method.
	FavoriteFunc func(userID uint64, imageID uint64) error

	// FavoritesForImageFunc mocks the FavoritesForImage method.
	FavoritesForImageFunc func(imageID uint8) (*[]User, error)

	// FavoritesForUserFunc mocks the FavoritesForUser method.
	FavoritesForUserFunc func(userID uint8) (*[]Image, error)

	// FollowStreamFunc mocks the FollowStream method.
	FollowStreamFunc func(userID uint64, followID uint64) error

	// FollowUserFunc mocks the FollowUser method.
	FollowUserFunc func(userID uint64, followID uint64) error

	// StreamFollowersFunc mocks the StreamFollowers method.
	StreamFollowersFunc func(streamID uint64) (*[]User, error)

	// StreamsFollowedByFunc mocks the StreamsFollowedBy method.
	StreamsFollowedByFunc func(userID uint64) (*[]Stream, error)

	// UnFavoriteFunc mocks the UnFavorite method.
	UnFavoriteFunc func(userID uint64, imageID uint64) error

	// UnFollowStreamFunc mocks the UnFollowStream method.
	UnFollowStreamFunc func(userID uint64, followID uint64) error

	// UnFollowUserFunc mocks the UnFollowUser method.
	UnFollowUserFunc func(userID uint64, followID uint64) error

	// UserFollowedByFunc mocks the UserFollowedBy method.
	UserFollowedByFunc func(userID uint64) (*[]User, error)

	// UserFollowersFunc mocks the UserFollowers method.
	UserFollowersFunc func(userID uint64) (*[]User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Favorite holds details about calls to the Favorite method.
		Favorite []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ImageID is the imageID argument value.
			ImageID uint64
		}
		// FavoritesForImage holds details about calls to the FavoritesForImage method.
		FavoritesForImage []struct {
			// ImageID is the imageID argument value.
			ImageID uint8
		}
		// FavoritesForUser holds details about calls to the FavoritesForUser method.
		FavoritesForUser []struct {
			// UserID is the userID argument value.
			UserID uint8
		}
		// FollowStream holds details about calls to the FollowStream method.
		FollowStream []struct {
			// UserID is the userID argument value.
			UserID uint64
			// FollowID is the followID argument value.
			FollowID uint64
		}
		// FollowUser holds details about calls to the FollowUser method.
		FollowUser []struct {
			// UserID is the userID argument value.
			UserID uint64
			// FollowID is the followID argument value.
			FollowID uint64
		}
		// StreamFollowers holds details about calls to the StreamFollowers method.
		StreamFollowers []struct {
			// StreamID is the streamID argument value.
			StreamID uint64
		}
		// StreamsFollowedBy holds details about calls to the StreamsFollowedBy method.
		StreamsFollowedBy []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// UnFavorite holds details about calls to the UnFavorite method.
		UnFavorite []struct {
			// UserID is the userID argument value.
			UserID uint64
			// ImageID is the imageID argument value.
			ImageID uint64
		}
		// UnFollowStream holds details about calls to the UnFollowStream method.
		UnFollowStream []struct {
			// UserID is the userID argument value.
			UserID uint64
			// FollowID is the followID argument value.
			FollowID uint64
		}
		// UnFollowUser holds details about calls to the UnFollowUser method.
		UnFollowUser []struct {
			// UserID is the userID argument value.
			UserID uint64
			// FollowID is the followID argument value.
			FollowID uint64
		}
		// UserFollowedBy holds details about calls to the UserFollowedBy method.
		UserFollowedBy []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// UserFollowers holds details about calls to the UserFollowers method.
		UserFollowers []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
	}
}

// Favorite calls FavoriteFunc.
func (mock *ConnectionServiceMock) Favorite(userID uint64, imageID uint64) error {
	if mock.FavoriteFunc == nil {
		panic("ConnectionServiceMock.FavoriteFunc: method is nil but ConnectionService.Favorite was just called")
	}
	callInfo := struct {
		UserID  uint64
		ImageID uint64
	}{
		UserID:  userID,
		ImageID: imageID,
	}
	lockConnectionServiceMockFavorite.Lock()
	mock.calls.Favorite = append(mock.calls.Favorite, callInfo)
	lockConnectionServiceMockFavorite.Unlock()
	return mock.FavoriteFunc(userID, imageID)
}

// FavoriteCalls gets all the calls that were made to Favorite.
// Check the length with:
//     len(mockedConnectionService.FavoriteCalls())
func (mock *ConnectionServiceMock) FavoriteCalls() []struct {
	UserID  uint64
	ImageID uint64
} {
	var calls []struct {
		UserID  uint64
		ImageID uint64
	}
	lockConnectionServiceMockFavorite.RLock()
	calls = mock.calls.Favorite
	lockConnectionServiceMockFavorite.RUnlock()
	return calls
}

// FavoritesForImage calls FavoritesForImageFunc.
func (mock *ConnectionServiceMock) FavoritesForImage(imageID uint8) (*[]User, error) {
	if mock.FavoritesForImageFunc == nil {
		panic("ConnectionServiceMock.FavoritesForImageFunc: method is nil but ConnectionService.FavoritesForImage was just called")
	}
	callInfo := struct {
		ImageID uint8
	}{
		ImageID: imageID,
	}
	lockConnectionServiceMockFavoritesForImage.Lock()
	mock.calls.FavoritesForImage = append(mock.calls.FavoritesForImage, callInfo)
	lockConnectionServiceMockFavoritesForImage.Unlock()
	return mock.FavoritesForImageFunc(imageID)
}

// FavoritesForImageCalls gets all the calls that were made to FavoritesForImage.
// Check the length with:
//     len(mockedConnectionService.FavoritesForImageCalls())
func (mock *ConnectionServiceMock) FavoritesForImageCalls() []struct {
	ImageID uint8
} {
	var calls []struct {
		ImageID uint8
	}
	lockConnectionServiceMockFavoritesForImage.RLock()
	calls = mock.calls.FavoritesForImage
	lockConnectionServiceMockFavoritesForImage.RUnlock()
	return calls
}

// FavoritesForUser calls FavoritesForUserFunc.
func (mock *ConnectionServiceMock) FavoritesForUser(userID uint8) (*[]Image, error) {
	if mock.FavoritesForUserFunc == nil {
		panic("ConnectionServiceMock.FavoritesForUserFunc: method is nil but ConnectionService.FavoritesForUser was just called")
	}
	callInfo := struct {
		UserID uint8
	}{
		UserID: userID,
	}
	lockConnectionServiceMockFavoritesForUser.Lock()
	mock.calls.FavoritesForUser = append(mock.calls.FavoritesForUser, callInfo)
	lockConnectionServiceMockFavoritesForUser.Unlock()
	return mock.FavoritesForUserFunc(userID)
}

// FavoritesForUserCalls gets all the calls that were made to FavoritesForUser.
// Check the length with:
//     len(mockedConnectionService.FavoritesForUserCalls())
func (mock *ConnectionServiceMock) FavoritesForUserCalls() []struct {
	UserID uint8
} {
	var calls []struct {
		UserID uint8
	}
	lockConnectionServiceMockFavoritesForUser.RLock()
	calls = mock.calls.FavoritesForUser
	lockConnectionServiceMockFavoritesForUser.RUnlock()
	return calls
}

// FollowStream calls FollowStreamFunc.
func (mock *ConnectionServiceMock) FollowStream(userID uint64, followID uint64) error {
	if mock.FollowStreamFunc == nil {
		panic("ConnectionServiceMock.FollowStreamFunc: method is nil but ConnectionService.FollowStream was just called")
	}
	callInfo := struct {
		UserID   uint64
		FollowID uint64
	}{
		UserID:   userID,
		FollowID: followID,
	}
	lockConnectionServiceMockFollowStream.Lock()
	mock.calls.FollowStream = append(mock.calls.FollowStream, callInfo)
	lockConnectionServiceMockFollowStream.Unlock()
	return mock.FollowStreamFunc(userID, followID)
}

// FollowStreamCalls gets all the calls that were made to FollowStream.
// Check the length with:
//     len(mockedConnectionService.FollowStreamCalls())
func (mock *ConnectionServiceMock) FollowStreamCalls() []struct {
	UserID   uint64
	FollowID uint64
} {
	var calls []struct {
		UserID   uint64
		FollowID uint64
	}
	lockConnectionServiceMockFollowStream.RLock()
	calls = mock.calls.FollowStream
	lockConnectionServiceMockFollowStream.RUnlock()
	return calls
}

// FollowUser calls FollowUserFunc.
func (mock *ConnectionServiceMock) FollowUser(userID uint64, followID uint64) error {
	if mock.FollowUserFunc == nil {
		panic("ConnectionServiceMock.FollowUserFunc: method is nil but ConnectionService.FollowUser was just called")
	}
	callInfo := struct {
		UserID   uint64
		FollowID uint64
	}{
		UserID:   userID,
		FollowID: followID,
	}
	lockConnectionServiceMockFollowUser.Lock()
	mock.calls.FollowUser = append(mock.calls.FollowUser, callInfo)
	lockConnectionServiceMockFollowUser.Unlock()
	return mock.FollowUserFunc(userID, followID)
}

// FollowUserCalls gets all the calls that were made to FollowUser.
// Check the length with:
//     len(mockedConnectionService.FollowUserCalls())
func (mock *ConnectionServiceMock) FollowUserCalls() []struct {
	UserID   uint64
	FollowID uint64
} {
	var calls []struct {
		UserID   uint64
		FollowID uint64
	}
	lockConnectionServiceMockFollowUser.RLock()
	calls = mock.calls.FollowUser
	lockConnectionServiceMockFollowUser.RUnlock()
	return calls
}

// StreamFollowers calls StreamFollowersFunc.
func (mock *ConnectionServiceMock) StreamFollowers(streamID uint64) (*[]User, error) {
	if mock.StreamFollowersFunc == nil {
		panic("ConnectionServiceMock.StreamFollowersFunc: method is nil but ConnectionService.StreamFollowers was just called")
	}
	callInfo := struct {
		StreamID uint64
	}{
		StreamID: streamID,
	}
	lockConnectionServiceMockStreamFollowers.Lock()
	mock.calls.StreamFollowers = append(mock.calls.StreamFollowers, callInfo)
	lockConnectionServiceMockStreamFollowers.Unlock()
	return mock.StreamFollowersFunc(streamID)
}

// StreamFollowersCalls gets all the calls that were made to StreamFollowers.
// Check the length with:
//     len(mockedConnectionService.StreamFollowersCalls())
func (mock *ConnectionServiceMock) StreamFollowersCalls() []struct {
	StreamID uint64
} {
	var calls []struct {
		StreamID uint64
	}
	lockConnectionServiceMockStreamFollowers.RLock()
	calls = mock.calls.StreamFollowers
	lockConnectionServiceMockStreamFollowers.RUnlock()
	return calls
}

// StreamsFollowedBy calls StreamsFollowedByFunc.
func (mock *ConnectionServiceMock) StreamsFollowedBy(userID uint64) (*[]Stream, error) {
	if mock.StreamsFollowedByFunc == nil {
		panic("ConnectionServiceMock.StreamsFollowedByFunc: method is nil but ConnectionService.StreamsFollowedBy was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockConnectionServiceMockStreamsFollowedBy.Lock()
	mock.calls.StreamsFollowedBy = append(mock.calls.StreamsFollowedBy, callInfo)
	lockConnectionServiceMockStreamsFollowedBy.Unlock()
	return mock.StreamsFollowedByFunc(userID)
}

// StreamsFollowedByCalls gets all the calls that were made to StreamsFollowedBy.
// Check the length with:
//     len(mockedConnectionService.StreamsFollowedByCalls())
func (mock *ConnectionServiceMock) StreamsFollowedByCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockConnectionServiceMockStreamsFollowedBy.RLock()
	calls = mock.calls.StreamsFollowedBy
	lockConnectionServiceMockStreamsFollowedBy.RUnlock()
	return calls
}

// UnFavorite calls UnFavoriteFunc.
func (mock *ConnectionServiceMock) UnFavorite(userID uint64, imageID uint64) error {
	if mock.UnFavoriteFunc == nil {
		panic("ConnectionServiceMock.UnFavoriteFunc: method is nil but ConnectionService.UnFavorite was just called")
	}
	callInfo := struct {
		UserID  uint64
		ImageID uint64
	}{
		UserID:  userID,
		ImageID: imageID,
	}
	lockConnectionServiceMockUnFavorite.Lock()
	mock.calls.UnFavorite = append(mock.calls.UnFavorite, callInfo)
	lockConnectionServiceMockUnFavorite.Unlock()
	return mock.UnFavoriteFunc(userID, imageID)
}

// UnFavoriteCalls gets all the calls that were made to UnFavorite.
// Check the length with:
//     len(mockedConnectionService.UnFavoriteCalls())
func (mock *ConnectionServiceMock) UnFavoriteCalls() []struct {
	UserID  uint64
	ImageID uint64
} {
	var calls []struct {
		UserID  uint64
		ImageID uint64
	}
	lockConnectionServiceMockUnFavorite.RLock()
	calls = mock.calls.UnFavorite
	lockConnectionServiceMockUnFavorite.RUnlock()
	return calls
}

// UnFollowStream calls UnFollowStreamFunc.
func (mock *ConnectionServiceMock) UnFollowStream(userID uint64, followID uint64) error {
	if mock.UnFollowStreamFunc == nil {
		panic("ConnectionServiceMock.UnFollowStreamFunc: method is nil but ConnectionService.UnFollowStream was just called")
	}
	callInfo := struct {
		UserID   uint64
		FollowID uint64
	}{
		UserID:   userID,
		FollowID: followID,
	}
	lockConnectionServiceMockUnFollowStream.Lock()
	mock.calls.UnFollowStream = append(mock.calls.UnFollowStream, callInfo)
	lockConnectionServiceMockUnFollowStream.Unlock()
	return mock.UnFollowStreamFunc(userID, followID)
}

// UnFollowStreamCalls gets all the calls that were made to UnFollowStream.
// Check the length with:
//     len(mockedConnectionService.UnFollowStreamCalls())
func (mock *ConnectionServiceMock) UnFollowStreamCalls() []struct {
	UserID   uint64
	FollowID uint64
} {
	var calls []struct {
		UserID   uint64
		FollowID uint64
	}
	lockConnectionServiceMockUnFollowStream.RLock()
	calls = mock.calls.UnFollowStream
	lockConnectionServiceMockUnFollowStream.RUnlock()
	return calls
}

// UnFollowUser calls UnFollowUserFunc.
func (mock *ConnectionServiceMock) UnFollowUser(userID uint64, followID uint64) error {
	if mock.UnFollowUserFunc == nil {
		panic("ConnectionServiceMock.UnFollowUserFunc: method is nil but ConnectionService.UnFollowUser was just called")
	}
	callInfo := struct {
		UserID   uint64
		FollowID uint64
	}{
		UserID:   userID,
		FollowID: followID,
	}
	lockConnectionServiceMockUnFollowUser.Lock()
	mock.calls.UnFollowUser = append(mock.calls.UnFollowUser, callInfo)
	lockConnectionServiceMockUnFollowUser.Unlock()
	return mock.UnFollowUserFunc(userID, followID)
}

// UnFollowUserCalls gets all the calls that were made to UnFollowUser.
// Check the length with:
//     len(mockedConnectionService.UnFollowUserCalls())
func (mock *ConnectionServiceMock) UnFollowUserCalls() []struct {
	UserID   uint64
	FollowID uint64
} {
	var calls []struct {
		UserID   uint64
		FollowID uint64
	}
	lockConnectionServiceMockUnFollowUser.RLock()
	calls = mock.calls.UnFollowUser
	lockConnectionServiceMockUnFollowUser.RUnlock()
	return calls
}

// UserFollowedBy calls UserFollowedByFunc.
func (mock *ConnectionServiceMock) UserFollowedBy(userID uint64) (*[]User, error) {
	if mock.UserFollowedByFunc == nil {
		panic("ConnectionServiceMock.UserFollowedByFunc: method is nil but ConnectionService.UserFollowedBy was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockConnectionServiceMockUserFollowedBy.Lock()
	mock.calls.UserFollowedBy = append(mock.calls.UserFollowedBy, callInfo)
	lockConnectionServiceMockUserFollowedBy.Unlock()
	return mock.UserFollowedByFunc(userID)
}

// UserFollowedByCalls gets all the calls that were made to UserFollowedBy.
// Check the length with:
//     len(mockedConnectionService.UserFollowedByCalls())
func (mock *ConnectionServiceMock) UserFollowedByCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockConnectionServiceMockUserFollowedBy.RLock()
	calls = mock.calls.UserFollowedBy
	lockConnectionServiceMockUserFollowedBy.RUnlock()
	return calls
}

// UserFollowers calls UserFollowersFunc.
func (mock *ConnectionServiceMock) UserFollowers(userID uint64) (*[]User, error) {
	if mock.UserFollowersFunc == nil {
		panic("ConnectionServiceMock.UserFollowersFunc: method is nil but ConnectionService.UserFollowers was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockConnectionServiceMockUserFollowers.Lock()
	mock.calls.UserFollowers = append(mock.calls.UserFollowers, callInfo)
	lockConnectionServiceMockUserFollowers.Unlock()
	return mock.UserFollowersFunc(userID)
}

// UserFollowersCalls gets all the calls that were made to UserFollowers.
// Check the length with:
//     len(mockedConnectionService.UserFollowersCalls())
func (mock *ConnectionServiceMock) UserFollowersCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockConnectionServiceMockUserFollowers.RLock()
	calls = mock.calls.UserFollowers
	lockConnectionServiceMockUserFollowers.RUnlock()
	return calls
}
