// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"github.com/dgrijalva/jwt-go"
	"sync"
)

var (
	lockAuthenticationServiceMockCreateToken  sync.RWMutex
	lockAuthenticationServiceMockPublicKey    sync.RWMutex
	lockAuthenticationServiceMockRefreshToken sync.RWMutex
	lockAuthenticationServiceMockVerifyToken  sync.RWMutex
)

// AuthenticationServiceMock is a mock implementation of AuthenticationService.
//
//     func TestSomethingThatUsesAuthenticationService(t *testing.T) {
//
//         // make and configure a mocked AuthenticationService
//         mockedAuthenticationService := &AuthenticationServiceMock{
//             CreateTokenFunc: func(userID uint64) (*jwt.Token, error) {
// 	               panic("TODO: mock out the CreateToken method")
//             },
//             PublicKeyFunc: func() (string, error) {
// 	               panic("TODO: mock out the PublicKey method")
//             },
//             RefreshTokenFunc: func(token *jwt.Token) (*jwt.Token, error) {
// 	               panic("TODO: mock out the RefreshToken method")
//             },
//             VerifyTokenFunc: func(token *jwt.Token) (bool, error) {
// 	               panic("TODO: mock out the VerifyToken method")
//             },
//         }
//
//         // TODO: use mockedAuthenticationService in code that requires AuthenticationService
//         //       and then make assertions.
//
//     }
type AuthenticationServiceMock struct {
	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func(userID uint64) (*jwt.Token, error)

	// PublicKeyFunc mocks the PublicKey method.
	PublicKeyFunc func() (string, error)

	// RefreshTokenFunc mocks the RefreshToken method.
	RefreshTokenFunc func(token *jwt.Token) (*jwt.Token, error)

	// VerifyTokenFunc mocks the VerifyToken method.
	VerifyTokenFunc func(token *jwt.Token) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// PublicKey holds details about calls to the PublicKey method.
		PublicKey []struct {
		}
		// RefreshToken holds details about calls to the RefreshToken method.
		RefreshToken []struct {
			// Token is the token argument value.
			Token *jwt.Token
		}
		// VerifyToken holds details about calls to the VerifyToken method.
		VerifyToken []struct {
			// Token is the token argument value.
			Token *jwt.Token
		}
	}
}

// CreateToken calls CreateTokenFunc.
func (mock *AuthenticationServiceMock) CreateToken(userID uint64) (*jwt.Token, error) {
	if mock.CreateTokenFunc == nil {
		panic("AuthenticationServiceMock.CreateTokenFunc: method is nil but AuthenticationService.CreateToken was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	lockAuthenticationServiceMockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	lockAuthenticationServiceMockCreateToken.Unlock()
	return mock.CreateTokenFunc(userID)
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//     len(mockedAuthenticationService.CreateTokenCalls())
func (mock *AuthenticationServiceMock) CreateTokenCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	lockAuthenticationServiceMockCreateToken.RLock()
	calls = mock.calls.CreateToken
	lockAuthenticationServiceMockCreateToken.RUnlock()
	return calls
}

// PublicKey calls PublicKeyFunc.
func (mock *AuthenticationServiceMock) PublicKey() (string, error) {
	if mock.PublicKeyFunc == nil {
		panic("AuthenticationServiceMock.PublicKeyFunc: method is nil but AuthenticationService.PublicKey was just called")
	}
	callInfo := struct {
	}{}
	lockAuthenticationServiceMockPublicKey.Lock()
	mock.calls.PublicKey = append(mock.calls.PublicKey, callInfo)
	lockAuthenticationServiceMockPublicKey.Unlock()
	return mock.PublicKeyFunc()
}

// PublicKeyCalls gets all the calls that were made to PublicKey.
// Check the length with:
//     len(mockedAuthenticationService.PublicKeyCalls())
func (mock *AuthenticationServiceMock) PublicKeyCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthenticationServiceMockPublicKey.RLock()
	calls = mock.calls.PublicKey
	lockAuthenticationServiceMockPublicKey.RUnlock()
	return calls
}

// RefreshToken calls RefreshTokenFunc.
func (mock *AuthenticationServiceMock) RefreshToken(token *jwt.Token) (*jwt.Token, error) {
	if mock.RefreshTokenFunc == nil {
		panic("AuthenticationServiceMock.RefreshTokenFunc: method is nil but AuthenticationService.RefreshToken was just called")
	}
	callInfo := struct {
		Token *jwt.Token
	}{
		Token: token,
	}
	lockAuthenticationServiceMockRefreshToken.Lock()
	mock.calls.RefreshToken = append(mock.calls.RefreshToken, callInfo)
	lockAuthenticationServiceMockRefreshToken.Unlock()
	return mock.RefreshTokenFunc(token)
}

// RefreshTokenCalls gets all the calls that were made to RefreshToken.
// Check the length with:
//     len(mockedAuthenticationService.RefreshTokenCalls())
func (mock *AuthenticationServiceMock) RefreshTokenCalls() []struct {
	Token *jwt.Token
} {
	var calls []struct {
		Token *jwt.Token
	}
	lockAuthenticationServiceMockRefreshToken.RLock()
	calls = mock.calls.RefreshToken
	lockAuthenticationServiceMockRefreshToken.RUnlock()
	return calls
}

// VerifyToken calls VerifyTokenFunc.
func (mock *AuthenticationServiceMock) VerifyToken(token *jwt.Token) (bool, error) {
	if mock.VerifyTokenFunc == nil {
		panic("AuthenticationServiceMock.VerifyTokenFunc: method is nil but AuthenticationService.VerifyToken was just called")
	}
	callInfo := struct {
		Token *jwt.Token
	}{
		Token: token,
	}
	lockAuthenticationServiceMockVerifyToken.Lock()
	mock.calls.VerifyToken = append(mock.calls.VerifyToken, callInfo)
	lockAuthenticationServiceMockVerifyToken.Unlock()
	return mock.VerifyTokenFunc(token)
}

// VerifyTokenCalls gets all the calls that were made to VerifyToken.
// Check the length with:
//     len(mockedAuthenticationService.VerifyTokenCalls())
func (mock *AuthenticationServiceMock) VerifyTokenCalls() []struct {
	Token *jwt.Token
} {
	var calls []struct {
		Token *jwt.Token
	}
	lockAuthenticationServiceMockVerifyToken.RLock()
	calls = mock.calls.VerifyToken
	lockAuthenticationServiceMockVerifyToken.RUnlock()
	return calls
}
